list(
count = 1,
label = "2 años",
step = "year",
stepmode = "backward"),
list(
count = 1,
label = "Ultimo año",
step = "year",
stepmode = "todate"),
list(step = "all"))),
title = "Fecha"
),
title = "Ocupación semanal de cada computador",
yaxis = list(title = "Computador")
)
library(plotly)
p <-plot_ly(datos, x = ~Condicion, y = ~numeroExamenes)
library(plotly)
p <-plot_ly(datos, x = ~Condicion, y = ~numeroExamenes)
library(plotly)
p <-plot_ly(datos, x = ~Condicion, y = ~numeroExamenes)
library(plotly)
p <-plot_ly(datos, x = ~Condicion, y = ~numeroExamenes)
barplot(datos)
plot(datos)
plot(datos)
shiny::runApp('D:/Dropbox/documentos/ModelosProbabilísticos/Cursos/Modelos/2017-19/Complementarias/Complementaria 4/shiny/ComplementariaShiny')
runApp('D:/Dropbox/documentos/ModelosProbabilísticos/Cursos/Modelos/2017-19/Complementarias/Complementaria 4/shiny/ComplementariaShiny')
runApp('D:/Dropbox/documentos/ModelosProbabilísticos/Cursos/Modelos/2017-19/Complementarias/Complementaria 4/shiny/ComplementariaShiny')
runApp('D:/Dropbox/documentos/ModelosProbabilísticos/Cursos/Modelos/2017-19/Complementarias/Complementaria 4/shiny/ComplementariaShiny')
getwd()
install.packages("tuneR")
library(tuneR)
a <- sine(440, 2 * SECOND)
str(a)
#' Generate a sine wave.
#' @param frequency Frequency (440 is middle A.)
#' @param duration Duration in samples (probably 44100 samples per second)
sine <- function(frequency, duration, samp.rate = SECOND)
sin(tau * frequency * (1:duration)/samp.rate)
a <- sine(440, 2 * SECOND)
a <- sine(440, 2 * 1)
sine <- function(frequency, duration, samp.rate = SECOND)
sin(tau * frequency * (1:duration)/samp.rate)
sine <- function(frequency, duration, samp.rate = SECOND)
sin(1.5 * frequency * (1:duration)/samp.rate)
library(tuneR)
a <- sine(440, 2 * 1)
a <- sine(440, 2 * 1,1)
str(a)
tuneR::writeWave(tuneR::Wave(a), 'a.wav')
a <- sine(440, 2 * 60,1)
a <- sine(440, 2 * 60,60)
str(a)
tuneR::writeWave(tuneR::Wave(a), 'a.wav')
tuneR::writeWave(tuneR::Wave(a), 'a.wav')
SECOND = 44100
SECOND = 44100
a <- sine(440,2*SECOND)
sine <- function(frequency, duration, samp.rate = SECOND)
sin(1.5 * frequency * (1:duration)/samp.rate)
SECOND = 44100
a <- sine(440,2*SECOND)
str(a)
tuneR::writeWave(tuneR::Wave(a), 'a.wav')
dir(math)
names(math)
?Math
sine <- function(frequency, duration, samp.rate = SECOND)
sin(2*pi * frequency * (1:duration)/samp.rate)
SECOND = 44100
a <- sine(440,2*SECOND)
str(a)
tuneR::writeWave(tuneR::Wave(a), 'a.wav')
install.packages("beepr")
library(beepr)
beep()
beep()
beep()
beep(1)
beep(2)
beep(3)
for(i in 1:11){
beep(3)
}
for(i in 1:11){
beep(3)
}
for(i in 1:11){
beep(i)
}
for(i in 1:11){
beep(i)
sleep(3)
}
Sys.sleep(3)
for(i in 1:11){
beep(i)
Sys.sleep(3)
}
play(iris$Sepal.Length)
play(sin(1:10000/20))
?play
audio::play(sin(1:10000/20))
audio::play()
sin(1:10000/20)
audio::play(sin(1:10000/20))
sin(1:10000/20)
x = audio::play(sin(1:10000/20))
x = audio::play(sin(1:10000/20), rate = 44100)
library(audio)
x = audio::play(sin(1:10000/20), rate = 44100)
x = audio::play(sin(1:10000/20), rate = 44100)
x = audio::play(sin(1:10000/20), rate = 44100)
x = audio::play(sin(1:10000/20), rate = 44100)
x = audio::play(sin(1:10000/20), rate = 44100)
x = audio::play(iris$Sepal.Length, rate = 44100)
x = audio::play(iris$Sepal.Length, rate = 44100)
x = audio::play(iris$Sepal.Length, rate = 44100)
x = audio::play(iris$Sepal.Length, rate = 44100)
x = audio::play(Wave(a), rate = 44100)
a <- sine(440,2*SECOND)
sine <- function(frequency, duration, samp.rate = SECOND)
sin(2*pi * frequency * (1:duration)/samp.rate)
a <- sine(440,2*SECOND)
SECOND = 44100
a <- sine(440,2*SECOND)
x = audio::play(Wave(a), rate = 44100)
x = audio::play(iris$Sepal.Length, rate = 44100)
x = audio::play(iris$Sepal.Length, rate = 44100)
library(audio)
x = audio::play(iris$Sepal.Length, rate = 44100)
x = audio::play(iris$Sepal.Length, rate = 20000)
x = audio::play(iris$Sepal.Length, rate = 10000)
x = audio::play(iris$Sepal.Length, rate = 60)
x = audio::play(iris$Sepal.Length, rate = 60)
x = audio::play(iris$Sepal.Length, rate = 20)
x = audio::play(iris$Sepal.Length, rate = 20)
x = audio::play(iris$Sepal.Length, rate = 10)
x = audio::play(iris$Sepal.Length, rate = 10)
x = audio::play(iris$Sepal.Length, rate = 10)
x = audio::play(iris$Sepal.Length, rate = 10)
x = audio::play(iris$Sepal.Length, rate = 10)
x = audio::play(iris$Sepal.Length, rate = 5)
length(iris$Sepal.Length)
plot(iris$Sepal.Length)
x = audio::play(iris$Sepal.Length/10, rate = 10)
x = audio::play(Wave(a), rate = 44100)
x = audio::play(iris$Sepal.Length/10, rate = 10)
?play
x = audio::play(iris$Sepal.Length*20, rate = 10)
x = audio::play(iris$Sepal.Length*20, rate = 10)
x = audio::play(iris$Sepal.Length*20, rate = 8)
x = audio::play(iris$Sepal.Length*20, rate = 8)
x = audio::play(iris$Sepal.Length*20, rate = 10)
x = audio::play(sin(iris$Sepal.Length), rate = 10)
x
x::
plot(iris$Sepal.Length)
x = audio::play(sin(iris$Sepal.Length))
x = audio::play(sin(1:50000))
pause(x)
pause(x)
library(tuneR)
library(tuneR)
play(sine(iris$Sepal.Length))
?play
rep(5,50)
sine(freq = rep(369.99,50))
sine(freq = 369.99)
x = sine(freq = 369.99)
tuneR::play(x)
tuneR::play(x)
?sine
plot(x)
tuneR::play(x)
x = pulse(220, duration = 1000)
tuneR::play(x)
x
x = pulse(220, duration = 1000, xunit = "time")
x
x = pulse(220, duration = 20, xunit = "time")
x
tuneR::play(x)
plot(x)
plot(x)
x = pulse(369.99, duration = 20, xunit = "time")
tuneR::play(x)
x = sine(freq = 440)
tuneR::play(x)
P.n <- function(n, P.a = 440, a = 49)
P.a * (2^(1/12))^(n - a)
harryPotter <- c(3,8,11,10,8,3,1,10,8,11,10,7,9,3)
P.n <- function(n, P.a = 440, a = 49)
P.a * (2^(1/12))^(n - a)
P.n(harryPotter, 440, 1)
hertz = P.n(harryPotter, 440, 1)
x = sine(hertz,freq = 440)
?play
?sine
?play
x = sine(hertz,freq = 440)
x = sine(hertz[1],freq = 440)
musica
musica = hertz[1]
hertz = P.n(harryPotter, 440, 1)
x = sine(hertz[1],freq = 440)
musica = hertz[1]
for(i in 2:length(hertz)){
musica = bind(musica,hertz[i])
}
?bind
musica = hertz[1]
for(i in 2:length(hertz)){
musica = tuneR::bind(musica,hertz[i])
}
musica = sine(hertz[1])
musica
for(i in 2:length(hertz)){
musica = tuneR::bind(musica,hertz[i])
}
x = sine(hertz[1],freq = 440)
musica = sine(hertz[1])
for(i in 2:length(hertz)){
musica = tuneR::bind(musica,sine(hertz[i]))
}
tuneR::play(musica)
musica = sine(hertz[1])
musica
tuneR::play(musica)
musica = sine(hertz[1])
for(i in 2:length(hertz)){
musica = tuneR::bind(musica,sine(hertz[i]))
}
tuneR::play(musica)
x = sine(hertz[1], duration = 0.5, xunit = "time")
musica = sine(hertz[1])
for(i in 2:length(hertz)){
musica = tuneR::bind(musica,sine(hertz[i]))
}
tuneR::play(musica)
musica = sine(hertz[1],duration = 0.5, xunit = "time")
musica
for(i in 2:length(hertz)){
musica = tuneR::bind(musica,sine(hertz[i]))
}
tuneR::play(musica)
musica = sine(hertz[1],duration = 0.5, xunit = "time")
for(i in 2:length(hertz)){
musica = tuneR::bind(musica,sine(hertz[i],duration = 0.5, xunit = "time"))
}
tuneR::play(musica)
musica = sine(hertz[1],duration = 0.5, xunit = "time")
for(i in 2:length(hertz)){
musica = tuneR::bind(musica,sine(hertz[i],duration = 0.5, xunit = "time"))
}
tuneR::play(musica)
tuneR::play(musica)
harryPotter <- c(8,1,4,3,1,8,6,3,1,4,3,11,3,8,8,1,4,3,1,8,11,10,9,5,9,8,8,8,4,1,4)
hertz = P.n(harryPotter, 440, 1)
musica = sine(hertz[1],duration = 0.5, xunit = "time")
for(i in 2:length(hertz)){
musica = tuneR::bind(musica,sine(hertz[i],duration = 0.5, xunit = "time"))
}
tuneR::play(musica)
harryPotter <- c(8,1,4,3,1,8,6,3,NA,1,4,3,11,3,8,8,1,4,3,1,8,11,10,9,5,9,8,8,8,4,1,4)
hertz = P.n(harryPotter, 440, 1)
musica = sine(hertz[1],duration = 0.5, xunit = "time")
for(i in 2:length(hertz)){
musica = tuneR::bind(musica,sine(hertz[i],duration = 0.5, xunit = "time"))
}
harryPotter <- c(8,1,4,3,1,8,6,3,0,1,4,3,11,3,8,8,1,4,3,1,8,11,10,9,5,9,8,8,8,4,1,4)
x = sine(hertz[1], duration = 0.5, xunit = "time")
musica = sine(hertz[1],duration = 0.5, xunit = "time")
hertz = P.n(harryPotter, 440, 1)
musica = sine(hertz[1],duration = 0.5, xunit = "time")
for(i in 2:length(hertz)){
musica = tuneR::bind(musica,sine(hertz[i],duration = 0.5, xunit = "time"))
}
tuneR::play(musica)
harryPotter <- c(8,1,4,3,1,8,6,3,49,1,4,3,11,3,8,8,1,4,3,1,8,11,10,9,5,9,8,8,8,4,1,4)
P.n <- function(n, P.a = 440, a = 49)
P.a * (2^(1/12))^(n - a)
hertz = P.n(harryPotter, 440, 1)
x = sine(hertz[1], duration = 0.5, xunit = "time")
musica = sine(hertz[1],duration = 0.5, xunit = "time")
for(i in 2:length(hertz)){
musica = tuneR::bind(musica,sine(hertz[i],duration = 0.5, xunit = "time"))
}
tuneR::play(musica)
tuneR::play(musica)
harryPotter <- c(8,1,4,3,1,8,6,3,1,4,3,11,3,8,8,1,4,3,1,8,11,10,9,5,9,8,8,8,4,1,4)
P.n <- function(n, P.a = 440, a = 49)
P.a * (2^(1/12))^(n - a)
hertz = P.n(harryPotter, 440, 1)
x = sine(hertz[1], duration = 0.5, xunit = "time")
musica = sine(hertz[1],duration = 0.5, xunit = "time")
for(i in 2:length(hertz)){
musica = tuneR::bind(musica,sine(hertz[i],duration = 0.5, xunit = "time"))
}
tuneR::play(musica)
miData = read_dta("D:/Dropbox/documentos/Visual Analytics/tarea4/ESP.dta")
colsInfoDemo = c(3,4,5,6,7,8,9,10,11,12)
datosDemo = miData[,colsInfoDemo]
colsOpinion = c(13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
muestra = sample(1:nrow(miData),100, replace = FALSE)
datosOpinion = miData[,colsOpinion]
datosOpinion = datosOpinion[complete.cases(datosOpinion),]
datosOpinion = datosOpinion[muestra,]
miData = read_dta("D:/Dropbox/documentos/Visual Analytics/tarea4/ESP.dta")
library(haven)
miData = read_dta("D:/Dropbox/documentos/Visual Analytics/tarea4/ESP.dta")
colsInfoDemo = c(3,4,5,6,7,8,9,10,11,12)
datosDemo = miData[,colsInfoDemo]
colsOpinion = c(13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
muestra = sample(1:nrow(miData),100, replace = FALSE)
datosOpinion = miData[,colsOpinion]
datosOpinion = datosOpinion[complete.cases(datosOpinion),]
datosOpinion = datosOpinion[muestra,]
for(i in 1:length(datosOpinion)){
datosOpinion[,i] = datosOpinion[,i]/max(datosOpinion[,i], na.rm = TRUE)
}
closenessMatrix = matrix(0,nrow = nrow(datosOpinion), ncol = nrow(datosOpinion))
for(fila in 1:nrow(closenessMatrix)){
closenessMatrix[fila,] = rowSums(1-abs(sweep(as.matrix(datosOpinion),2,as.numeric(datosOpinion[fila,]))),na.rm = TRUE)
closenessMatrix[fila,fila] = 0
}
library(RJSONIO)
nodos = list()
for(i in 1:nrow(closenessMatrix)){
nodos = append(nodos,list(list(id = i, ano = datosDemo$ano[muestra[i]],genero = datosDemo$sexo[muestra[i]],
edad = datosDemo$edad[muestra[i]], estrato = datosDemo$estrato_servicios[muestra[i]])))
}
links = list()
for(i in 1:nrow(closenessMatrix)){
for(j in 1:nrow(closenessMatrix)){
if(i != j){
if(closenessMatrix[i,j]>0){
links = append(links,list(list(source = i, target = j, value = round(closenessMatrix[i,j]))))
}
}
}
}
summary(closenessMatrix[1,])
red = list(nodes = nodos, links = links)
setwd("D:/Dropbox/documentos/Visual Analytics/tarea4")
write(toJSON(red,pretty= T),file = "red.json")
summary(closenessMatrix[84,])
miData = read_dta("D:/Dropbox/documentos/Visual Analytics/tarea4/ESP.dta")
miData = miData[complete.cases(miData),]
colsInfoDemo = c(3,4,5,6,7,8,9,10,11,12)
datosDemo = miData[,colsInfoDemo]
colsOpinion = c(13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
muestra = sample(1:nrow(miData),100, replace = FALSE)
datosOpinion = miData[,colsOpinion]
datosOpinion = datosOpinion[muestra,]
summary(datosOpinion)
for(i in 1:length(datosOpinion)){
datosOpinion[,i] = datosOpinion[,i]/max(datosOpinion[,i], na.rm = TRUE)
}
closenessMatrix = matrix(0,nrow = nrow(datosOpinion), ncol = nrow(datosOpinion))
for(fila in 1:nrow(closenessMatrix)){
closenessMatrix[fila,] = rowSums(1-abs(sweep(as.matrix(datosOpinion),2,as.numeric(datosOpinion[fila,]))),na.rm = TRUE)
closenessMatrix[fila,fila] = 0
}
library(RJSONIO)
nodos = list()
for(i in 1:nrow(closenessMatrix)){
nodos = append(nodos,list(list(id = i, ano = datosDemo$ano[muestra[i]],genero = datosDemo$sexo[muestra[i]],
edad = datosDemo$edad[muestra[i]], estrato = datosDemo$estrato_servicios[muestra[i]])))
}
links = list()
for(i in 1:nrow(closenessMatrix)){
for(j in 1:nrow(closenessMatrix)){
if(i != j){
if(closenessMatrix[i,j]>0){
links = append(links,list(list(source = i, target = j, value = round(closenessMatrix[i,j]))))
}
}
}
}
summary(closenessMatrix[84,])
red = list(nodes = nodos, links = links)
setwd("D:/Dropbox/documentos/Visual Analytics/tarea4")
write(toJSON(red,pretty= T),file = "red.json")
colsInfoDemo = c(3,4,5,6,7,8,9,10,11,12)
datosDemo = miData[,colsInfoDemo]
colsOpinion = c(13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
muestra = sample(1:nrow(miData),500, replace = FALSE)
datosOpinion = miData[,colsOpinion]
datosOpinion = datosOpinion[muestra,]
summary(datosOpinion)
for(i in 1:length(datosOpinion)){
datosOpinion[,i] = datosOpinion[,i]/max(datosOpinion[,i], na.rm = TRUE)
}
closenessMatrix = matrix(0,nrow = nrow(datosOpinion), ncol = nrow(datosOpinion))
for(fila in 1:nrow(closenessMatrix)){
closenessMatrix[fila,] = rowSums(1-abs(sweep(as.matrix(datosOpinion),2,as.numeric(datosOpinion[fila,]))),na.rm = TRUE)
closenessMatrix[fila,fila] = 0
}
library(RJSONIO)
nodos = list()
for(i in 1:nrow(closenessMatrix)){
nodos = append(nodos,list(list(id = i, ano = datosDemo$ano[muestra[i]],genero = datosDemo$sexo[muestra[i]],
edad = datosDemo$edad[muestra[i]], estrato = datosDemo$estrato_servicios[muestra[i]])))
}
links = list()
for(i in 1:nrow(closenessMatrix)){
for(j in 1:nrow(closenessMatrix)){
if(i != j){
if(closenessMatrix[i,j]>0){
links = append(links,list(list(source = i, target = j, value = round(closenessMatrix[i,j]))))
}
}
}
}
summary(closenessMatrix[84,])
red = list(nodes = nodos, links = links)
setwd("D:/Dropbox/documentos/Visual Analytics/tarea4")
write(toJSON(red,pretty= T),file = "red.json")
miData = read_dta("D:/Dropbox/documentos/Visual Analytics/tarea4/ESP.dta")
miData = miData[complete.cases(miData),]
miData = read_dta("D:/Dropbox/documentos/Visual Analytics/tarea4/ESP.dta")
colsOpinion = c(13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
miData = miData[complete.cases(miData[,colsOpinion]),]
colsInfoDemo = c(3,4,5,6,7,8,9,10,11,12)
datosDemo = miData[,colsInfoDemo]
colsOpinion = c(13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)
muestra = sample(1:nrow(miData),500, replace = FALSE)
datosOpinion = miData[,colsOpinion]
datosOpinion = datosOpinion[muestra,]
for(i in 1:length(datosOpinion)){
datosOpinion[,i] = datosOpinion[,i]/max(datosOpinion[,i], na.rm = TRUE)
}
closenessMatrix = matrix(0,nrow = nrow(datosOpinion), ncol = nrow(datosOpinion))
for(fila in 1:nrow(closenessMatrix)){
closenessMatrix[fila,] = rowSums(1-abs(sweep(as.matrix(datosOpinion),2,as.numeric(datosOpinion[fila,]))),na.rm = TRUE)
closenessMatrix[fila,fila] = 0
}
library(RJSONIO)
nodos = list()
for(i in 1:nrow(closenessMatrix)){
nodos = append(nodos,list(list(id = i, ano = datosDemo$ano[muestra[i]],genero = datosDemo$sexo[muestra[i]],
edad = datosDemo$edad[muestra[i]], estrato = datosDemo$estrato_servicios[muestra[i]])))
}
links = list()
for(i in 1:nrow(closenessMatrix)){
for(j in 1:nrow(closenessMatrix)){
if(i != j){
if(closenessMatrix[i,j]>0){
links = append(links,list(list(source = i, target = j, value = round(closenessMatrix[i,j]))))
}
}
}
}
summary(closenessMatrix[84,])
red = list(nodes = nodos, links = links)
write(toJSON(red,pretty= T),file = "red.json")
links = list()
for(i in 1:nrow(closenessMatrix)){
for(j in 1:nrow(closenessMatrix)){
if(i != j){
if(closenessMatrix[i,j]>16){
links = append(links,list(list(source = i, target = j, value = round(closenessMatrix[i,j]))))
}
}
}
}
summary(closenessMatrix[84,])
red = list(nodes = nodos, links = links)
write(toJSON(red,pretty= T),file = "red.json")
summary(1/closenessMatrix[84,])
summary(1/closenessMatrix[84,])*5000
summary(closenessMatrix[188,])
summary(closenessMatrix[27,])
links = list()
for(i in 1:nrow(closenessMatrix)){
for(j in 1:nrow(closenessMatrix)){
if(i != j){
if(closenessMatrix[i,j]>14){
links = append(links,list(list(source = i, target = j, value = round(closenessMatrix[i,j]))))
}
}
}
}
red = list(nodes = nodos, links = links)
write(toJSON(red,pretty= T),file = "red.json")
links = list()
for(i in 1:nrow(closenessMatrix)){
for(j in 1:nrow(closenessMatrix)){
if(i != j){
if(closenessMatrix[i,j]>15){
links = append(links,list(list(source = i, target = j, value = round(closenessMatrix[i,j]))))
}
}
}
}
red = list(nodes = nodos, links = links)
write(toJSON(red,pretty= T),file = "red.json")
links = list()
for(i in 1:nrow(closenessMatrix)){
for(j in 1:nrow(closenessMatrix)){
if(i != j){
if(closenessMatrix[i,j]>16){
links = append(links,list(list(source = i, target = j, value = round(closenessMatrix[i,j]))))
}
}
}
}
red = list(nodes = nodos, links = links)
write(toJSON(red,pretty= T),file = "red.json")
